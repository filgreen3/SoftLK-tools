#!/bin/sh
#
# macOS build script for SLK_img2pixel.
# This script generates a Makefile and then you can run `make` to build.
#
# --- Prerequisites ---
# 1. Xcode Command Line Tools:
#    Run `xcode-select --install` in your terminal.
#
# 2. Homebrew (the missing package manager for macOS):
#    See https://brew.sh/ for installation instructions.
#
# 3. Required libraries (SDL2 and pkg-config):
#    Run `brew install sdl2 pkg-config` in your terminal.
#

set -e

# --- Configuration for macOS ---

# Check for pkg-config and the SDL2 library.
if ! command -v pkg-config >/dev/null || ! pkg-config --exists sdl2; then
    echo "Error: 'pkg-config' is not found or it cannot find the SDL2 library." >&2
    echo "Please install the prerequisites: brew install sdl2 pkg-config" >&2
    exit 1
fi

# Get compiler and linker flags for SDL2 from pkg-config.
# This is the robust way to find libraries installed with Homebrew.
SDL_CFLAGS=$(pkg-config --cflags sdl2)
SDL_LIBS=$(pkg-config --libs sdl2)

# Define Compiler Flags for macOS (using Clang via `cc`).
# - Note: Apple Clang does not support `-fopenmp`, so it has been removed.
#   Features requiring OpenMP for parallel processing will be disabled.
# - Added SDL2 include paths from pkg-config.
CFLAGS="-Wall -Wextra -Wshadow -std=c99 -Wno-sign-compare -Wconversion -Wno-sign-conversion -Wno-unused-parameter -O3 -g -fno-omit-frame-pointer -I../HLH_gui/ -I../3rd/ -I../ -I. $SDL_CFLAGS"

# Define Linker Libraries.
LDLIBS="$SDL_LIBS -lm"

# --- Makefile Generation ---
# The rest of the script prints a valid Makefile to standard output.
# You can redirect this output to a file, e.g., `./macos.sh > Makefile`

# 1. Print Makefile header (variables and 'all' target)
printf "# Makefile generated by macos.sh\n\n"
printf ".PHONY: all clean\n\n"

printf "CC      = cc\n"
printf "CFLAGS  = %s\n" "$CFLAGS"
printf "LDLIBS  = %s\n\n" "$LDLIBS"

printf "all: ../bin/SLK_img2pix ../bin/SLK_img2pix_cmd\n\n"

# 2. Find all source files and generate their dependency rules.
obj=""

# This function does two things:
# - Prints a Makefile dependency rule for a given .c file.
# - Adds the corresponding .o file to the '$obj' shell variable.
function add_file
{
   cc -MM -MT "${1%%.c}.o" "$1" $CFLAGS
   obj="$obj ${1%%.c}.o"
}

for src in $(find ./ -maxdepth 1 -name "*.c"); do
   add_file "$src"
done

for src in $(find ../shared -name "*.c"); do
   add_file "$src"
done

add_file "../external/tinyfiledialogs.c"
add_file "../HLH_gui/HLH_gui_all.c"
add_file "unix/util_unix.c"

# 3. Print the 'OBJ' variable for the Makefile.
printf "\nOBJ =%s\n\n" "$obj"

# 4. Generate dependency rules for the main entry-point files.
cc -MM -MT "main/main.o" "main/main.c" $CFLAGS
cc -MM -MT "main/main_cmd.o" "main/main_cmd.c" $CFLAGS

# 5. Print the linker rules for creating the executables.
# The `mkdir` command is added to ensure the output directory exists.
printf "\n../bin/SLK_img2pix_cmd: \$(OBJ) main/main_cmd.o\n"
printf "\tmkdir -p ../bin\n"
printf "\t\$(CC) -o \$@ \$^ \$(LDLIBS)\n\n"

printf "../bin/SLK_img2pix: \$(OBJ) main/main.o\n"
printf "\tmkdir -p ../bin\n"
printf "\t\$(CC) -o \$@ \$^ \$(LDLIBS)\n\n"

# 6. Print the 'clean' rule to remove generated files.
printf "clean:\n"
printf "\trm -f \$(OBJ) main/*.o ../bin/SLK_img2pix ../bin/SLK_img2pix_cmd\n"
